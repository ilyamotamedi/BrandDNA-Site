var a=class extends Error{error;details;documentationUrl;constructor(r){super(r.message||"An unexpected error occurred"),this.error=r.error||"internal-error",this.details=r.details||"An unexpected error occurred",this.documentationUrl=r.documentationUrl||"",this.name="SupadataError";}};var u={403:{error:"invalid-request",message:"Invalid or missing API key",details:"Please ensure you have provided a valid API key"},404:{error:"invalid-request",message:"Endpoint does not exist",details:"The API endpoint you are trying to access does not exist"},429:{error:"limit-exceeded",message:"Limit exceeded",details:"You have exceeded the allowed request rate or quota limits"}},T=(n,r)=>n in u?new a({...u[n],message:u[n].message,details:r||u[n].details}):new a({error:"internal-error",message:"An unexpected error occurred",details:r});var c=class{config;constructor(r){this.config=r;}async fetch(r,e={},s="GET"){let t=`${this.config.baseUrl||"https://api.supadata.ai/v1"}${r.startsWith("/")?r:`/${r}`}`;if(s==="GET"&&Object.keys(e).length>0){let p=new URLSearchParams;Object.entries(e).forEach(([o,f])=>{f!=null&&p.append(o,String(f));}),t+=`?${p.toString()}`;}return this.fetchUrl(t,s,e)}async fetchUrl(r,e="GET",s){let i={method:e,headers:{"x-api-key":this.config.apiKey,"Content-Type":"application/json"}};e==="POST"&&s&&(i.body=JSON.stringify(s));let t=await fetch(r,i),p=t.headers.get("content-type");if(!t.ok){if([403,404,429].includes(t.status)){let o=await t.json();throw T(t.status,o.message)}if(p?.includes("application/json")){let o=await t.json();throw new a(o)}else throw new a({error:"internal-error",message:"Unexpected error response format",details:await t.text()})}try{if(!p?.includes("application/json"))throw new a({error:"internal-error",message:"Invalid response format",details:"Expected JSON response but received different content type"});return await t.json()}catch(o){throw new a({error:"internal-error",message:"Failed to parse response",details:o instanceof Error?o.message:"Unknown error"})}}};var g=class extends c{async transcript(r){return this.fetch("/youtube/transcript",r)}async translate(r){return this.fetch("/youtube/transcript/translate",r)}};var m=class extends c{async scrape(r){return this.fetch("/web/scrape",{url:r})}async map(r){return this.fetch("/web/map",{url:r})}async crawl(r){return this.fetch("/web/crawl",r,"POST")}async getCrawlResults(r){let e,s=[],i;do e=await(i?this.fetchUrl(i):this.fetch(`/web/crawl/${r}`)),e.pages&&(s=[...s,...e.pages]),i=e.next;while(i);return e}};var h=class{youtube;web;constructor(r){this.youtube=new g(r),this.web=new m(r);}};
export{c as BaseClient,h as Supadata,a as SupadataError,m as WebService,g as YouTubeService};//# sourceMappingURL=index.mjs.map
//# sourceMappingURL=index.mjs.map