interface TranscriptChunk {
    text: string;
    offset: number;
    duration: number;
    lang: string;
}
interface Transcript {
    content: TranscriptChunk[] | string;
    lang: string;
    availableLangs: string[];
}
interface TranslatedTranscript {
    content: TranscriptChunk[] | string;
    lang: string;
}
interface Scrape {
    url: string;
    content: string;
    name: string;
    description: string;
    ogUrl: string;
    countCharacters: number;
    urls: string[];
}
interface Map {
    urls: string[];
}
interface CrawlRequest {
    url: string;
    limit?: number;
}
interface Crawl {
    jobId: string;
}
interface CrawlJob {
    status: 'scraping' | 'completed' | 'failed' | 'cancelled';
    pages?: Scrape[];
    next?: string;
}
interface SupadataConfig {
    apiKey: string;
    baseUrl?: string;
}
declare class SupadataError extends Error {
    error: 'invalid-request' | 'missing-parameters' | 'internal-error' | 'transcript-unavailable' | 'video-not-found' | 'video-id-invalid' | 'youtube-api-error' | 'limit-exceeded';
    details: string;
    documentationUrl: string;
    constructor(error: {
        error: SupadataError['error'];
        message?: string;
        details?: string;
        documentationUrl?: string;
    });
}

declare class BaseClient {
    protected config: SupadataConfig;
    constructor(config: SupadataConfig);
    protected fetch<T>(endpoint: string, params?: Record<string, any>, method?: 'GET' | 'POST'): Promise<T>;
    protected fetchUrl<T>(url: string, method?: 'GET' | 'POST', body?: Record<string, any>): Promise<T>;
}

interface TranscriptParams {
    videoId: string;
    lang?: string;
    text?: boolean;
}
interface TranslateParams extends TranscriptParams {
    lang: string;
}
declare class YouTubeService extends BaseClient {
    transcript(params: TranscriptParams): Promise<Transcript>;
    translate(params: TranslateParams): Promise<TranslatedTranscript>;
}

declare class WebService extends BaseClient {
    scrape(url: string): Promise<Scrape>;
    map(url: string): Promise<Map>;
    crawl(request: CrawlRequest): Promise<Crawl>;
    getCrawlResults(jobId: string): Promise<CrawlJob>;
}

declare class Supadata {
    readonly youtube: YouTubeService;
    readonly web: WebService;
    constructor(config: SupadataConfig);
}

export { BaseClient, type Crawl, type CrawlJob, type CrawlRequest, type Map, type Scrape, Supadata, type SupadataConfig, SupadataError, type Transcript, type TranscriptChunk, type TranscriptParams, type TranslateParams, type TranslatedTranscript, WebService, YouTubeService };
