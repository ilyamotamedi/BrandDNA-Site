{"version":3,"sources":["../src/types.ts","../src/gateway-error-mapper.ts","../src/client.ts","../src/services/youtube.ts","../src/services/web.ts","../src/index.ts"],"names":["SupadataError","error","GATEWAY_STATUS_ERRORS","mapGatewayError","statusCode","errorText","BaseClient","config","endpoint","params","method","url","queryParams","key","value","body","options","response","contentType","errorData","YouTubeService","WebService","request","jobId","pages","nextUrl","Supadata"],"mappings":"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","file":"index.cjs","sourcesContent":["export interface TranscriptChunk {\n  text: string;\n  offset: number;\n  duration: number;\n  lang: string;\n}\n\nexport interface Transcript {\n  content: TranscriptChunk[] | string;\n  lang: string;\n  availableLangs: string[];\n}\n\nexport interface TranslatedTranscript {\n  content: TranscriptChunk[] | string;\n  lang: string;\n}\n\nexport interface Scrape {\n  url: string;\n  content: string;\n  name: string;\n  description: string;\n  ogUrl: string;\n  countCharacters: number;\n  urls: string[];\n}\n\nexport interface Map {\n  urls: string[];\n}\n\nexport interface CrawlRequest {\n  url: string;\n  limit?: number;\n}\n\nexport interface Crawl {\n  jobId: string;\n}\n\nexport interface CrawlJob {\n  status: 'scraping' | 'completed' | 'failed' | 'cancelled';\n  pages?: Scrape[];\n  next?: string;\n}\n\nexport interface SupadataConfig {\n  apiKey: string;\n  baseUrl?: string;\n}\n\nexport class SupadataError extends Error {\n  error:\n    | 'invalid-request'\n    | 'missing-parameters'\n    | 'internal-error'\n    | 'transcript-unavailable'\n    | 'video-not-found'\n    | 'video-id-invalid'\n    | 'youtube-api-error'\n    | 'limit-exceeded';\n  details: string;\n  documentationUrl: string;\n\n  constructor(error: {\n    error: SupadataError['error'];\n    message?: string;\n    details?: string;\n    documentationUrl?: string;\n  }) {\n    super(error.message || 'An unexpected error occurred');\n    this.error = error.error || 'internal-error';\n    this.details = error.details || 'An unexpected error occurred';\n    this.documentationUrl = error.documentationUrl || '';\n    this.name = 'SupadataError';\n  }\n}\n","import { SupadataError } from './types';\n\n/*\nThe API gateway returns errors in text/plain content type. \nAs a temporary workaround we're mapping them to SupadataError.\n*/\n\nconst GATEWAY_STATUS_ERRORS = {\n  403: {\n    error: 'invalid-request' as const,\n    message: 'Invalid or missing API key',\n    details: 'Please ensure you have provided a valid API key',\n  },\n  404: {\n    error: 'invalid-request' as const,\n    message: 'Endpoint does not exist',\n    details: 'The API endpoint you are trying to access does not exist',\n  },\n  429: {\n    error: 'limit-exceeded' as const,\n    message: 'Limit exceeded',\n    details: 'You have exceeded the allowed request rate or quota limits',\n  },\n};\n\nexport const mapGatewayError = (\n  statusCode: number,\n  errorText: string\n): SupadataError => {\n  if (statusCode in GATEWAY_STATUS_ERRORS) {\n    return new SupadataError({\n      ...GATEWAY_STATUS_ERRORS[\n        statusCode as keyof typeof GATEWAY_STATUS_ERRORS\n      ],\n      message:\n        GATEWAY_STATUS_ERRORS[statusCode as keyof typeof GATEWAY_STATUS_ERRORS]\n          .message,\n      details:\n        errorText ||\n        GATEWAY_STATUS_ERRORS[statusCode as keyof typeof GATEWAY_STATUS_ERRORS]\n          .details,\n    });\n  }\n\n  // Default error if status code is not recognized\n  return new SupadataError({\n    error: 'internal-error',\n    message: 'An unexpected error occurred',\n    details: errorText,\n  });\n};\n","import { SupadataConfig, SupadataError } from './types.js';\nimport { mapGatewayError } from './gateway-error-mapper.js';\n\nexport class BaseClient {\n  protected config: SupadataConfig;\n\n  constructor(config: SupadataConfig) {\n    this.config = config;\n  }\n\n  protected async fetch<T>(\n    endpoint: string,\n    params: Record<string, any> = {},\n    method: 'GET' | 'POST' = 'GET'\n  ): Promise<T> {\n    const baseUrl = this.config.baseUrl || 'https://api.supadata.ai/v1';\n    let url = `${baseUrl}${\n      endpoint.startsWith('/') ? endpoint : `/${endpoint}`\n    }`;\n\n    if (method === 'GET' && Object.keys(params).length > 0) {\n      const queryParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          queryParams.append(key, String(value));\n        }\n      });\n      url += `?${queryParams.toString()}`;\n    }\n\n    return this.fetchUrl<T>(url, method, params);\n  }\n\n  protected async fetchUrl<T>(\n    url: string,\n    method: 'GET' | 'POST' = 'GET',\n    body?: Record<string, any>\n  ): Promise<T> {\n    const options: RequestInit = {\n      method,\n      headers: {\n        'x-api-key': this.config.apiKey,\n        'Content-Type': 'application/json',\n      },\n    };\n\n    if (method === 'POST' && body) {\n      options.body = JSON.stringify(body);\n    }\n\n    const response = await fetch(url, options);\n\n    const contentType = response.headers.get('content-type');\n\n    if (!response.ok) {\n      // First check for gateway-specific status codes\n      if ([403, 404, 429].includes(response.status)) {\n        const errorData = await response.json();\n        throw mapGatewayError(response.status, errorData.message);\n      }\n\n      // Handle standard API errors\n      if (contentType?.includes('application/json')) {\n        const errorData = await response.json();\n        throw new SupadataError(errorData);\n      } else {\n        // Fallback for unexpected non-JSON errors\n        throw new SupadataError({\n          error: 'internal-error',\n          message: 'Unexpected error response format',\n          details: await response.text(),\n        });\n      }\n    }\n\n    try {\n      if (!contentType?.includes('application/json')) {\n        throw new SupadataError({\n          error: 'internal-error',\n          message: 'Invalid response format',\n          details: 'Expected JSON response but received different content type',\n        });\n      }\n\n      return (await response.json()) as T;\n    } catch (error) {\n      throw new SupadataError({\n        error: 'internal-error',\n        message: 'Failed to parse response',\n        details: error instanceof Error ? error.message : 'Unknown error',\n      });\n    }\n  }\n}\n","import { BaseClient } from '../client.js';\nimport { Transcript, TranslatedTranscript } from '../types.js';\n\nexport interface TranscriptParams {\n  videoId: string;\n  lang?: string;\n  text?: boolean;\n}\n\nexport interface TranslateParams extends TranscriptParams {\n  lang: string;\n}\n\nexport class YouTubeService extends BaseClient {\n  async transcript(params: TranscriptParams): Promise<Transcript> {\n    return this.fetch<Transcript>('/youtube/transcript', params);\n  }\n\n  async translate(params: TranslateParams): Promise<TranslatedTranscript> {\n    return this.fetch<TranslatedTranscript>(\n      '/youtube/transcript/translate',\n      params\n    );\n  }\n}\n","import { BaseClient } from '../client.js';\nimport { Scrape, Map, CrawlRequest, Crawl, CrawlJob } from '../types.js';\n\nexport class WebService extends BaseClient {\n  async scrape(url: string): Promise<Scrape> {\n    return this.fetch<Scrape>('/web/scrape', { url });\n  }\n\n  async map(url: string): Promise<Map> {\n    return this.fetch<Map>('/web/map', { url });\n  }\n\n  async crawl(request: CrawlRequest): Promise<Crawl> {\n    return this.fetch<Crawl>('/web/crawl', request, 'POST');\n  }\n\n  async getCrawlResults(jobId: string): Promise<CrawlJob> {\n    let response: CrawlJob;\n    let pages: Scrape[] = [];\n    let nextUrl: string | undefined;\n\n    do {\n      response = await (nextUrl\n        ? this.fetchUrl<CrawlJob>(nextUrl)\n        : this.fetch<CrawlJob>(`/web/crawl/${jobId}`));\n\n      if (response.pages) {\n        pages = [...pages, ...response.pages];\n      }\n      nextUrl = response.next;\n    } while (nextUrl);\n\n    return response;\n  }\n}\n","import { SupadataConfig } from './types.js';\nimport { YouTubeService } from './services/youtube.js';\nimport { WebService } from './services/web.js';\n\nexport * from './types.js';\nexport * from './client.js';\nexport * from './services/youtube.js';\nexport * from './services/web.js';\n\nexport class Supadata {\n  readonly youtube: YouTubeService;\n  readonly web: WebService;\n\n  constructor(config: SupadataConfig) {\n    this.youtube = new YouTubeService(config);\n    this.web = new WebService(config);\n  }\n}\n"]}